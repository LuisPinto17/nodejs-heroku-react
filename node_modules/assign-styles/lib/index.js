/**
 * Assigns two styles and optionally overwrites existing values
 * Built to assign inline-style objects and respects CSS's !important annotation
 * @param {Object} styles - style objects which get merged together
 * Note: The first style object will serve as base
 * Existing values will get overwritten by default
 */
'use strict';

Object.defineProperty(exports, '__esModule', {
	value: true
});
exports['default'] = assignStyles;

function assignStyles() {
	var property = undefined;

	for (var _len = arguments.length, styles = Array(_len), _key = 0; _key < _len; _key++) {
		styles[_key] = arguments[_key];
	}

	var newStyles = styles.splice(1);
	var base = styles[0];

	newStyles.forEach(function (styleObj) {
		if (styleObj) {
			for (property in styleObj) {
				if (!(base.hasOwnProperty(property) && isImportant(base[property]))) {
					base[property] = styleObj[property];
				}
			}
		}
	});

	return base;
}

/**
 * Checks if a property value is an css important rule with !important
 * @param {string} property - property thats value gets checked 
 */
function isImportant(value) {
	return typeof value == 'string' && value.toLowerCase().indexOf('!important') > -1;
}
module.exports = exports['default'];